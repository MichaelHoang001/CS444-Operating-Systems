Script started on Wed Oct 28 16:56:56 2015
warning: could not update utmp entry
blade57(1)% make spotless
rm -f *.o *.opc *syms *.lnx
blade57(2)% ls
crt0.s           ioconf.c         startup0.s       testio.c         tty_public.h     ulib.s
hw2.doc          ioconf.h         startup1.c       tsyscall.h       tunistd.h
io.c             makefile         sysentry.s       tty.c            tunix.c
io_public.h      queue            test1.c          tty.h            typescript_ulab
blade57(3)% cat io.c
/*********************************************************************
*
*       file:           io.c
*       author:         betty o'neil
*
*       device-independent i/o package for SAPC
*
*/
/* hw2: delete include of io_public.h here, */
/*  put kernel-fn proto's, ioinit, sysread, etc., in tsystm.h */
#include <cpu.h>
#include "io_public.h"
#include "ioconf.h"

/*====================================================================
*
* i/o initialization loop for SAPC devices
*
*/

void ioinit(){
        int i;
        cli();
        for (i = 0; i < NDEVS; i++)
                devtab[i].dvinit(i);    /* call device-specific init routine */
        sti();
}

/*====================================================================
*
*       read function calling routine for SAPC devices
*       (hw2: rename to "sysread" for the kernel)
*/

int sysread(int dev, char *buf, int nchar){
        if (dev < 0 || dev >= NDEVS) return -1;      /* fail */
        return devtab[dev].dvread(dev, buf, nchar); /* call dev-specific routine */
}

/*====================================================================
*
*       write function calling routine for SAPC devices
*       (rename to "syswrite" for the kernel)
*/
int syswrite(int dev, char *buf, int nchar){
        if (dev < 0 || dev >= NDEVS) return -1;       /* fail */
        return devtab[dev].dvwrite(dev, buf, nchar); /* call dev-specific routine */
}

/*====================================================================
*
*       control function calling routine for SAPC devices
*       (you can drop this one for hw2)
*/
int control(int dev, int fncode, int val){  /* note: val could be pointer */
        if (dev < 0 || dev >= NDEVS) return -1;          /* fail */
        return devtab[dev].dvcontrol(dev, fncode, val); /* dev-specific routine */
}

blade57(4)% cat startup0.s
# asm startup file
# very first module in load
.globl _startup0exit
.text

   movl $0x3ffff0, %esp   # set user program stack
   movl $0, %ebp          # make debugger backtrace terminate here
   call _startupc         # call C startup, which calls user main
_startup0exit:
   int $3                 # return to Tutor

blade57(5)% cat startup1.c
/* C startup file, called from startup0.s-- */
void startupc(void);

void startupc(void){
        clr_bss();                    /* clear BSS area (uninitialized data) */
        init_devio();                 /* latch onto Tutor-supplied info, code */
        //(void)main();                 /* execute user-supplied main */
        (void)tunix_kernel_init();
}
blade57(6)% cat sysentry.s
.globl _syscall, _syscallc

.text

_syscall:
        pushl %edx      # push the values of eax to edx to stack
        pushl %ecx
        pushl %ebx
        pushl %eax
        call _syscallc  # call c trap routine in tunix.c
        popl %eax       # or replace it with add $4, %esp to  
                        # skip over the eax from the stack
        popl %ebx       #pop the values of ebx to edx from stack
        popl %ecx
        popl %edx
        iret
 
blade57(7)% cat test1.s[Kc
#include <stdio.h>
#include "io_public.h"

void main(void){
        //kprintf("test1.c main called!/n");
        int got, lib_console_dev, ldev;
        lib_console_dev = sys_get_console_dev();
        switch(lib_console_dev){
                case COM1:
                        ldev = TTY0;
                        break;
                case COM2:
                        ldev = TTY1;
                        break;
                default:
                        printf("Unknown console device\n");
                        return;
        }

        got = syswrite(ldev, "SYSWRITE\n",9);
//      exitcode();
}
blade57(8)% cat tunix.c
#include <stdio.h>
#include <serial.h>
#include <cpu.h>
#include <gates.h>
#include "io_public.h"

void tunix_kernel_init(void);
//void set_trap_gate(int n, IntHandler *inthand_addr);
void syscallc(int, int, char *,int);
//void sys_call_exit(void);


void tunix_kernel_init(){
        ioinit();
        //set_trap_gate(0x80, &syscall);
        main();
        //call _ustart();
}
/*
void set_trap_gate(int n, IntHandler *inthand_addr){
}
*/
void syscallc(int eax, int dev, char *buf, int nchar){
        printf("eax>%d<\n",eax);
        syswrite(dev,buf,nchar);
/*      iir = inpt(baseport+UART_IIR)
        switch(iir&UART_IIR_ID){
                case UART_IIR_RDI:
                        //rx function
                case UART_IIR_THRI:
                        //tx function
                        //no need to turn off tx int
                default:
                        //default function
        }*/
}

blade57(9)% cat ulib.s
# file :        ulib.s
# description:  assembler routines for read, write, exit
# hw2:   add read, exit                         

.globl _write,_read,_exit       
.text
# following Linux system call linkage
# user stack when execution reaches _write:     
# esp-> return addr
#       first arg  (to be put in ebx for syscall)
#       second arg (to be put in ecx)
#       third arg  (to be put in edx)

# user stack after pushl %ebx, needed to preserve %ebx (not a C scratch reg)
# esp->  saved-ebx
# 4(esp) return addr
# 8(esp) first arg  (to be put in ebx for syscall)
#12(esp) second arg (to be put in ecx)
#16(esp) third arg  (to be put in edx)
                        
_write: pushl %ebx                    # save the value of ebx
        movl 8(%esp),%ebx             # first arg in ebx
        movl 12(%esp),%ecx            # second arg in ecx
        movl 16(%esp),%edx            # third arg in edx
        movl $4,%eax                  # syscall # in eax
        int $0x80                     # trap to kernel
        popl  %ebx                    # restore the value of ebx
        ret

_read:  pushl %ebx
        movl 8(%esp),%ebx
        movl 12(%esp),%ecx
        movl 16(%esp),%edx
        movl $5,%eax
        int $0x80
        popl %ebx
        ret

_exit:  pushl %ebx
        movl 8(%esp),%ebx
        movl $3,%eax
        int $0x80
        popl %ebx
        ret

blade57(10)% make U=test1
/groups/ulab/bin/i386-gcc -c -o startup0.opc startup0.s
/groups/ulab/bin/i386-gcc -g -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized -Wshadow -pedantic -D__USE_FIXED_PROTOTYPES__ -I/groups/ulab/pcdev/include -I/groups/ulab/pcdev/include -c -o startup1.opc startup1.c
startup1.c: In function `startupc':
startup1.c:5: warning: implicit declaration of function `clr_bss'
startup1.c:6: warning: implicit declaration of function `init_devio'
startup1.c:8: warning: implicit declaration of function `tunix_kernel_init'
/groups/ulab/bin/i386-gcc -g -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized -Wshadow -pedantic -D__USE_FIXED_PROTOTYPES__ -I/groups/ulab/pcdev/include -I/groups/ulab/pcdev/include -c -o tunix.opc  tunix.c
tunix.c: In function `tunix_kernel_init':
tunix.c:16: warning: implicit declaration of function `main'
/groups/ulab/bin/i386-gcc -c -o sysentry.opc sysentry.s
/groups/ulab/bin/i386-gcc -g -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized -Wshadow -pedantic -D__USE_FIXED_PROTOTYPES__ -I/groups/ulab/pcdev/include -I/groups/ulab/pcdev/include -c -o io.opc io.c
/groups/ulab/bin/i386-gcc -g -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized -Wshadow -pedantic -D__USE_FIXED_PROTOTYPES__ -I/groups/ulab/pcdev/include -I/groups/ulab/pcdev/include -c -o tty.opc tty.c
/groups/ulab/bin/i386-gcc -g -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized -Wshadow -pedantic -D__USE_FIXED_PROTOTYPES__ -I/groups/ulab/pcdev/include -I/groups/ulab/pcdev/include -c -o ioconf.opc ioconf.c
/groups/ulab/bin/i386-gcc -c -o crt0.opc crt0.s
/groups/ulab/bin/i386-gcc -g -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized -Wshadow -pedantic -D__USE_FIXED_PROTOTYPES__ -I/groups/ulab/pcdev/include -I/groups/ulab/pcdev/include -c -o test1.opc test1.c
/groups/ulab/bin/i386-gcc -c -o ulib.opc ulib.s
/groups/ulab/bin/i386-ld -N -Ttext 1000e0 -o test1.lnx \
  startup0.opc startup1.opc tunix.opc sysentry.opc io.opc tty.opc ioconf.opc queue/queue.opc crt0.opc test1.opc ulib.opc /groups/ulab/pcdev/lib/libc.a
rm -f syms;/groups/ulab/bin/i386-nm -n test1.lnx>test1.syms;ln -s test1.syms syms
blade57(11)% exit
script done on Wed Oct 28 16:57:41 2015
